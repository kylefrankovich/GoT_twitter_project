mrt = mean(RT),
acc = mean(Correct))
sub.mn_centralized_non_norml = sub.mn
grp.mn <- summarise(sub.mn,
grt = mean(mrt),
gac = mean(acc))
grp.mn_centralized = grp.mn
sub.mn <- sub.mn %>%
group_by(SubID) %>%
mutate(
submean = mean(acc)) %>%
ungroup() %>%
mutate(
grandmn = mean(acc)) %>%
group_by(trainLength, TOA, SubID, centralized) %>%
mutate(
acc.nor = (acc - submean) + grandmn)
sub.mn_centralized_norml = sub.mn
sub.mn.lateralized = filter(sub.mn, centralized == 0)
sub.mn.centralized = filter(sub.mn, centralized == 1)
ggplot(sub.mn.lateralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.centralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "centralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
# plot normalized ACC, letters and symbols, same plot
ggplot(sub.mn, aes(trainLength, acc.nor, shape = factor(centralized), color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)',
title = "centralized and lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
setwd("~/Google Drive/Young_Hall_data_analysis/Young_Hall_behavioral_data")
plot_path = ("~/Google Drive/Young_Hall_data_analysis/LOTP data plots/LOTP_ladies_and_gentlemen/")
exclSubs = c()
df <- read.table('YH_LOTP_ladies_and_gentlemen_mk3.txt', stringsAsFactor = FALSE, header = TRUE) %>%
filter(!SubID %in% exclSubs)
head(df)
length(unique(df$SubID))
sub.mn <- df %>%
group_by(TOA, trainLength, SubID, resp_all) %>%
summarise(
mrt = mean(RT),
acc = mean(Correct))
grp.mn <- summarise(sub.mn,
grt = mean(mrt),
gac = mean(acc))
sub.mn <- sub.mn %>%
group_by(SubID) %>%
mutate(
submean = mean(acc)) %>%
ungroup() %>%
mutate(
grandmn = mean(acc)) %>%
group_by(trainLength, TOA, SubID, resp_all) %>%
mutate(
acc.nor = (acc - submean) + grandmn)
View(df)
sub.mn.report_last = filter(sub.mn, resp_all == 0)
sub.mn.report_all = filter(sub.mn, resp_all == 1)
ggplot(sub.mn.lateralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.report_last, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
8*32
256/2
128/4
ggplot(sub.mn.report_last, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')
ggplot(sub.mn.report_last, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5)
ggplot(sub.mn.report_last, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.report_last, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "report last", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.report_all, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "report all", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.lateralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.centralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "centralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.lateralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.centralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "centralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn, aes(trainLength, acc.nor, shape = factor(centralized), color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)',
title = "centralized and lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn, aes(trainLength, acc.nor, shape = factor(centralized), color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)',
title = "centralized and lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
# find subject means
sub.mn <- df %>%
group_by(TOA, trainLength, SubID, centralized) %>%
summarise(
mrt = mean(RT),
acc = mean(Correct))
sub.mn_centralized_non_norml = sub.mn
sub.mn <- sub.mn %>%
group_by(SubID) %>%
mutate(
submean = mean(acc)) %>%
ungroup() %>%
mutate(
grandmn = mean(acc)) %>%
group_by(trainLength, TOA, SubID, centralized) %>%
mutate(
acc.nor = (acc - submean) + grandmn)
sub.mn_centralized_norml = sub.mn
sub.mn.lateralized = filter(sub.mn, centralized == 0)
sub.mn.centralized = filter(sub.mn, centralized == 1)
ggplot(sub.mn.lateralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
library(dplyr)
library(ggplot2)
# set working directory (data folder)
setwd("~/Google Drive/Young_Hall_data_analysis/Young_Hall_behavioral_data")
plot_path = ("~/Google Drive/Young_Hall_data_analysis/LOTP data plots/LOTP_ladies_and_gentlemen/")
exclSubs = c()
# Load Data
df <- read.table('YH_LOTP_ladies_and_gentlemen_mk2.txt', stringsAsFactor = FALSE, header = TRUE) %>%
filter(!SubID %in% exclSubs)
head(df)
length(unique(df$SubID))
sub.mn <- df %>%
group_by(TOA, trainLength, SubID, centralized) %>%
summarise(
mrt = mean(RT),
acc = mean(Correct))
sub.mn_centralized_non_norml = sub.mn
grp.mn <- summarise(sub.mn,
grt = mean(mrt),
gac = mean(acc))
grp.mn_centralized = grp.mn
sub.mn <- sub.mn %>%
group_by(SubID) %>%
mutate(
submean = mean(acc)) %>%
ungroup() %>%
mutate(
grandmn = mean(acc)) %>%
group_by(trainLength, TOA, SubID, centralized) %>%
mutate(
acc.nor = (acc - submean) + grandmn)
sub.mn_centralized_norml = sub.mn
sub.mn.lateralized = filter(sub.mn, centralized == 0)
sub.mn.centralized = filter(sub.mn, centralized == 1)
ggplot(sub.mn.lateralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn.centralized, aes(trainLength, acc.nor, color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)', title = "centralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
ggplot(sub.mn, aes(trainLength, acc.nor, shape = factor(centralized), color = factor(TOA)))+
labs(x = 'Train Length', y = 'Accuracy (%)',
title = "centralized and lateralized", color = 'TOA (ms)')+
scale_x_continuous(breaks = 1:4)+
scale_y_continuous(labels = function(x) x * 100)+
stat_summary(fun.data = mean_cl_normal, geom = 'pointrange', size = 1.5) +
stat_summary(fun.y = mean, geom = 'line', size = 1.5) +
theme_bw(base_size = 20)
m <- ggplot(movies, aes(x = rating))
install.packages(ggplot2movies)
install.packages('ggplot2movies')
m <- ggplot(movies, aes(x = rating))
library(ggplot2movies)
m <- ggplot(movies, aes(x = rating))
dPlot(
density ~ x
,data = ggplot_build(m + geom_density())$data[[1]][c("x","density")]
,type = "line"
)
nPlot(
density ~ x
,data = ggplot_build(m + geom_density())$data[[1]][c("x","density")]
,type = "lineChart"
)
setwd('/Users/kfranko/Desktop/GoT_twitter_project/data_viz/')
fname = 'df_eps1_4.csv'
df <- read.csv(fname, header = TRUE)
character_list = c('brienne', 'sansa', 'daenerys', 'melisandre', 'cersei', 'margaery', 'arya')
df_women_of_thrones = filter(df, names %in% character_list)
women_of_thrones_line_plot = ggplot(data=df_women_of_thrones,
aes(x=episode, y=count_percent,
group=names, colour=names)) +
geom_line() +
labs(x = 'episode', y = 'percentage of mentions',
title = "Women of Thrones", colour = 'characters')+
geom_point(size = 2)
ggplotly(women_of_thrones_line_plot)
women_of_thrones_line_plot
library(rCharts)
nPlot(
density ~ x
,data = ggplot_build(m + geom_density())$data[[1]][c("x","density")]
,type = "lineChart"
)
women.of.thrones.line.rcharts <- hPlot(
x='episode', y='count_percent',
group='names', data=ggplot_build(women_of_thrones_line_plot),
type="line")
ggplot_build(women_of_thrones_line_plot)
ggplot_build(m)
data = ggplot_build(m + geom_density())$data[[1]][c("x","density")
)
data = ggplot_build(m + geom_density())$data[[1]][c("x","density"))
data = ggplot_build(m + geom_density())$data[[1]][c("x","density")]
View(data)
women.of.thrones.line.rcharts <- hPlot(x='episode', y='count_percent', group='names', data=df_women_of_thrones, type="line")
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$save('test.html','iframesrc', cdn=TRUE, include_assets=TRUE)
women.of.thrones.line.rcharts$save('test.html','iframesrc', cdn=TRUE)
s
women.of.thrones.line.rcharts
women_of_thrones_line_plot
brienne_tormund = c('brienne', 'tormund')
df_brienne_tormund = filter(df, names %in% brienne_tormund)
brienne_tormund_line_plot = ggplot(data=df_brienne_tormund,
aes(x=episode, y=count_percent,
group=names, colour=names)) +
geom_line() +
labs(x = 'episode', y = 'percentage of mentions',
title = "Brienne and Tormund <3", colour = 'lovebirds')+
geom_point(size = 2)
brienne_tormund_line_plot
brienne.tormund.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_brienne_tormund,
type="line")
brienne.tormund.line.rcharts
women_of_thrones_line_plot
data2=ggplot_build(women_of_thrones_line_plot)
data2
nPlot(
density ~ x
,data = ggplot_build(m + geom_density())$data[[1]][c("x","density")]
,type = "lineChart"
)
rcharts_line_ggplot_style = nPlot(
density ~ x
,data = ggplot_build(m + geom_density())$data[[1]][c("x","density")]
,type = "lineChart"
)
rcharts_line_ggplot_style
data = ggplot_build(m$data[[1]][c("x","density")]
)
data = ggplot_build(m$data[[1]][c("x","density")])
data = ggplot_build(m + geom_density())$data[[1]][c("x","density")]
data = ggplot_build(m)$data[[1]][c("x","density")]
data = ggplot_build(m + geom_density())$data[[1]][c("x","density")]
data2
women.of.thrones.line.rcharts
?hPlot
??hPlot
women.of.thrones.line.rcharts$set(pointSize = 0, lineWidth = 1)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$set(pointSize = 0, lineWidth = 2)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$set(pointSize = 0, lineWidth = 5)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$set(pointSize = 5, lineWidth = 5)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(
x='episode', y='count_percent',
group='names', data=ggplot_build(women_of_thrones_line_plot),
type="line",
title='Title')
women.of.thrones.line.rcharts <- hPlot(
x='episode', y='count_percent',
group='names', data=ggplot_build(women_of_thrones_line_plot),
type="line",
)
women.of.thrones.line.rcharts <- hPlot(
x='episode', y='count_percent',
group='names', data=ggplot_build(women_of_thrones_line_plot),
type="line",
)
women.of.thrones.line.rcharts <- hPlot(
x='episode', y='count_percent',
group='names', data=ggplot_build(women_of_thrones_line_plot),
type="line"
)
setwd('/Users/kfranko/Desktop/GoT_twitter_project/data_viz/')
fname = 'df_eps1_4.csv'
df <- read.csv(fname, header = TRUE)
character_list = c('brienne', 'sansa', 'daenerys', 'melisandre', 'cersei', 'margaery', 'arya')
df_women_of_thrones = filter(df, names %in% character_list)
women_of_thrones_line_plot = ggplot(data=df_women_of_thrones,
aes(x=episode, y=count_percent,
group=names, colour=names)) +
geom_line() +
labs(x = 'episode', y = 'percentage of mentions',
title = "Women of Thrones", colour = 'characters')+
geom_point(size = 2)
women_of_thrones_line_plot
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line")
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='test')
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Women of Thrones')
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Women of Thrones',
yAxis$title='percentage of mentions')
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Women of Thrones'
)
women.of.thrones.line.rcharts$yAxis( axisLabel = "percentage of mentions" )
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line"
)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$set(title = "rCharts + nvd3 Power")
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Women of Thrones'
)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$xAxis(axisLabel = "Episode")
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- nPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Women of Thrones'
)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Women of Thrones'
)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Women of Thrones',
yAxis='test'
)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Women of Thrones'
)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$yAxis(title = list(text = "Convergence Rate"))
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$yAxis(title = list(text = "percentage of mentions"))
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$xAxis(title = list(text = "episode"))
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$xAxis(tickValues = [1,2,3,4])
women.of.thrones.line.rcharts$xAxis(tickValues = c(1,2,3,4))
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$xAxis(minorTicknterval = 0)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$xAxis(minorTicknterval = null)
women.of.thrones.line.rcharts$xAxis(minorTicknterval = 'null'')
)
'
women.of.thrones.line.rcharts$xAxis(minorTicknterval = 'null')
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$plotOptions(series = list(lineWidth = 4))
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$plotOptions
women.of.thrones.line.rcharts$save('test2.html','iframesrc', cdn=TRUE)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$yAxis(title = list(text = "percentage of mentions"))
women.of.thrones.line.rcharts$xAxis(title = list(text = "episode"))
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts$plotOptions(series = list(lineWidth = 4))
women.of.thrones.line.rcharts$save('test2.html','iframesrc', cdn=TRUE)
women.of.thrones.line.rcharts$xAxis(title = list(text = "episode"),
min = 0,, max = 5,
tickInterval = 1)
women.of.thrones.line.rcharts$xAxis(title = list(text = "episode"),
tickInterval = 1)
women.of.thrones.line.rcharts
women.of.thrones.line.rcharts <- hPlot(x='episode',
y='count_percent',
group='names',
data=df_women_of_thrones,
type="line",
title='Character mentions by episode'
)
women.of.thrones.line.rcharts$yAxis(title = list(text = "percentage of mentions"))
women.of.thrones.line.rcharts$xAxis(title = list(text = "episode"),
tickInterval = 1)
# women.of.thrones.line.rcharts$xAxis(minorTicknterval = 'null')
women.of.thrones.line.rcharts$plotOptions(series = list(lineWidth = 4))
women.of.thrones.line.rcharts$save('test2.html','iframesrc', cdn=TRUE)
